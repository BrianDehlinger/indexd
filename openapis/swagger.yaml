openapi: 3.0.0
servers:
  - url: 'https://data.example.domain/'
info:
  description: >-
    Indexd is a data indexing and tracking service. The code is open source on
    [github](https://github.com/uc-cdis/indexd)
  version: 1.0.0
  title: Indexd OpenAPI Specification
  termsOfService: 'http://cdis.uchicago.edu/terms/'
  contact:
    email: cdis@uchicago.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: global
    description: 'Search for an alias or index, potentially even a distributed search.'
    externalDocs:
      description: Find out more
      url: 'https://github.com/uc-cdis/indexd'
  - name: index
    description: 'Associate a file (object) with a unique id, and store some basic metadata.'
    externalDocs:
      description: Find out more
      url: 'https://github.com/uc-cdis/indexd'
  - name: alias
    description: >-
      create an alias for an entity stored in an external system managed by some
      other authority
    externalDocs:
      description: Find out more
      url: 'https://github.com/uc-cdis/indexd'
  - name: system
    description: System endpoints
paths:
  '/{UUID}':
    get:
      tags:
        - global
      summary: >-
        Get the metadata associated with the given id, alias, or distributed
        identifier
      description: Multiple status values can be provided with comma separated strings
      operationId: getEntryGlobal
      parameters:
        - name: UUID
          in: path
          description: entry id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputInfo'
        '400':
          description: Invalid status value
        '404':
          description: Record not found
      security: []
  /index:
    post:
      tags:
        - index
      summary: Add a new entry to the index
      description: ''
      operationId: addEntry
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputInfo'
        description: Metadata object that needs to be added to the store
        required: true
    get:
      tags:
        - index
      summary: List all records
      description: ''
      operationId: listEntries
      parameters:
        - name: metadata
          in: query
          description: metadata associated with the entry
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  ids:
                    type: array
                    items:
                      $ref: '#/components/schemas/DID'
                  size:
                    type: integer
                    format: int64
                    description: size in bytes
                  start:
                    type: integer
                    format: int64
                    description: start index for the pagination
                  limit:
                    type: integer
                    format: int64
                    description: number of dids to return
                  file_name:
                    type: string
                  urls:
                    type: array
                    items:
                      type: string
                  hashes:
                    $ref: '#/components/schemas/HashInfo'
      security: []
  '/index/{UUID}':
    get:
      tags:
        - index
      summary: Get the metadata associated with the given id
      description: Multiple status values can be provided with comma separated strings
      operationId: getEntry
      parameters:
        - name: UUID
          in: path
          description: entry id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputInfo'
        '400':
          description: Invalid status value
      security: []
    post:
      tags:
        - index
      summary: Add new version for the document associated to the provided uuid.
      description: >-
        Since data content is immutable, when you want to change the size or
        hash, a new index document with new uuid need to be created as its new
        version. That uuid is returned in the did field of the response
      operationId: addNewVersion
      parameters:
        - name: UUID
          in: path
          description: the uuid associated to the record needed to have new version
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputRef'
        '400':
          description: Invalid status value
      security:
        - basic_auth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionInputInfo'
        description: index record metadata for the new version
        required: true
    put:
      tags:
        - index
      summary: Update an existing entry in the index
      description: ''
      operationId: updateEntry
      parameters:
        - name: UUID
          in: path
          description: entry id
          required: true
          schema:
            type: string
        - name: rev
          in: query
          description: data revision - simple consistency mechanism
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInputInfo'
        description: index record that needs to be updated
        required: true
    delete:
      tags:
        - index
      summary: Delete an entry from the index
      description: ''
      operationId: deleteEntry
      parameters:
        - name: UUID
          in: path
          description: entry id
          required: true
          schema:
            type: string
        - name: rev
          in: query
          description: data revision - simple consistency mechanism
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Record is deleted successfully
        '400':
          description: Invalid ID supplied
      security:
        - basic_auth: []
  '/index/{UUID}/latest':
    get:
      tags:
        - index
      summary: >-
        Get the metadata of the latest index record version associated with the
        given id
      description: Multiple status values can be provided with comma separated strings
      operationId: getLatestVersion
      parameters:
        - name: UUID
          in: path
          description: entry id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputInfo'
        '400':
          description: Invalid status value
      security: []
  '/index/{UUID}/versions':
    get:
      tags:
        - index
      summary: Get the metadata of index record versions associated with the given id
      description: Multiple status values can be provided with comma separated strings
      operationId: getAllVersions
      parameters:
        - name: UUID
          in: path
          description: entry id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OutputInfo'
        '400':
          description: Invalid status value
      security: []
  /alias/:
    get:
      tags:
        - alias
      summary: list aliases with pagination
      operationId: listAliasEntries
      parameters:
        - name: size
          in: query
          required: false
          description: size in bytes
          schema:
            type: integer
            format: int64
        - name: start
          in: query
          required: false
          description: start index for the pagination
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          required: false
          description: number of aliases to return
          schema:
            type: integer
        - name: hash
          in: query
          required: false
          schema:
            type: string
            format: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  aliases:
                    type: array
                    items:
                      type: string
                  size:
                    type: integer
                    format: int64
                    description: size in bytes
                  start:
                    type: integer
                    format: int64
                    description: start index for the pagination
                  limit:
                    type: integer
                    format: int64
                    description: number of aliases to return
                  hashes:
                    $ref: '#/components/schemas/HashInfo'
  '/alias/{ALIASSTRING}':
    put:
      tags:
        - alias
      summary: Create or update an alias
      description: ''
      operationId: upsertAliasEntry
      parameters:
        - name: ALIASSTRING
          in: path
          required: true
          description: 'alias like ark:/31807/DC1-TESTARK'
          schema:
            type: string
        - name: rev
          in: query
          required: false
          description: >-
            Revision of the current alias to be updated. If you do not specify
            this then the last update wins in races.
          schema:
            type: string
            pattern: '^[a-z,0-9]{8}$'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AliasInputInfo'
        description: Metadata object that needs to be added to the store
        required: true
    get:
      tags:
        - alias
      summary: Fetch an alias
      description: ''
      operationId: getAliasEntry
      parameters:
        - name: ALIASSTRING
          in: path
          required: true
          description: 'alias like ark:/31807/DC1-TESTARK'
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasOutputInfo'
        '400':
          description: Invalid input
      security: []
    delete:
      tags:
        - alias
      summary: Delete an alias
      description: ''
      operationId: deleteAliasEntry
      parameters:
        - name: ALIASSTRING
          in: path
          required: true
          description: 'alias like ark:/31807/DC1-TESTARK'
          schema:
            type: string
        - name: rev
          in: query
          required: false
          description: Revision of the current alias to be deleted.
          schema:
            type: string
            pattern: '^[a-z,0-9]{8}$'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
  /_status:
    get:
      tags:
        - system
      summary: Returns if IndexD is healthy or not
      description: >-
        Health check endpoint which checks if IndexD can connect to its backing
        datastore or not.
      responses:
        '200':
          description: Healthy
        default:
          description: Unhealthy
  /_version:
    get:
      tags:
        - system
      summary: Returns the version of IndexD
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemVersionOutputRef'
  /_stats:
    get:
      tags:
        - system
      summary: Returns basic information about the records in IndexD
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatsOutputRef'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  securitySchemes:
    cdis_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://data-commons.org/oauth/dialog'
          scopes:
            'write:index': modify any entry in the index
            'read:index': read any entry from the index
    basic_auth:
      type: http
      scheme: basic
  schemas:
    HashInfo:
      type: object
      properties:
        md5:
          type: string
          pattern: '^[0-9a-f]{32}$'
        sha:
          type: string
          pattern: '^[0-9a-f]{40}$'
        sha256:
          type: string
          pattern: '^[0-9a-f]{64}$'
        sha512:
          type: string
          pattern: '^[0-9a-f]{128}$'
        crc:
          type: string
          pattern: '^[0-9a-f]{8}$'
        etag:
          type: string
          pattern: '^[0-9a-f]{32}(-\d+)?$'
    VersionInputInfo:
      type: object
      required:
        - size
        - hashes
        - urls
        - form
      properties:
        form:
          type: string
          description: how the entry was submitted to storage
          enum:
            - object
            - container
            - multipart
        size:
          type: integer
          format: int64
          description: size in bytes
        file_name:
          type: string
        metadata:
          type: string
        version:
          type: string
        urls:
          type: array
          items:
            type: string
        hashes:
          $ref: '#/components/schemas/HashInfo'
    InputInfo:
      type: object
      required:
        - size
        - hashes
        - urls
        - form
      properties:
        did:
          $ref: '#/components/schemas/DID'
        baseid:
          $ref: '#/components/schemas/UUID'
        form:
          type: string
          description: how the entry was submitted to storage
          enum:
            - object
            - container
            - multipart
        size:
          type: integer
          format: int64
          description: size in bytes
        file_name:
          type: string
        metadata:
          type: string
        version:
          type: string
        urls:
          type: array
          items:
            type: string
        hashes:
          $ref: '#/components/schemas/HashInfo'
    UpdateInputInfo:
      type: object
      properties:
        base_id:
          type: string
          pattern: >-
            ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
        file_name:
          type: string
        metadata:
          type: object
        version:
          type: string
        urls:
          type: array
          items:
            type: string
    OutputRef:
      type: object
      properties:
        did:
          $ref: '#/components/schemas/DID'
        baseid:
          $ref: '#/components/schemas/UUID'
        rev:
          type: string
          pattern: '^[0-9a-f]{8}$'
    AliasInputInfo:
      type: object
      properties:
        release:
          type: string
          description: has the entity been released?
          enum:
            - public
            - private
            - controlled
        size:
          type: integer
          format: int64
          description: size in bytes
        keeper_authority:
          description: who is keeping this entry up to date?
          type: string
        host_authority:
          description: who is hosting this entity?
          type: array
          items:
            type: string
        hashes:
          $ref: '#/components/schemas/HashInfo'
        metadata:
          type: string
    AliasRef:
      type: object
      properties:
        name:
          type: string
        rev:
          type: string
          pattern: '^[0-9a-f]{8}$'
    AliasOutputInfo:
      type: object
      properties:
        name:
          type: string
        rev:
          type: string
          pattern: '^[0-9a-f]{8}$'
        release:
          type: string
          description: has the entity been released?
          enum:
            - public
            - private
            - controlled
        size:
          type: integer
          format: int64
          description: size in bytes
        keeper_authority:
          description: who is keeping this entry up to date?
          type: string
        host_authority:
          description: who is hosting this entity?
          type: array
          items:
            type: string
        hashes:
          $ref: '#/components/schemas/HashInfo'
        metadata:
          type: string
    DID:
      type: string
      pattern: >-
        ^.*[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
    UUID:
      type: string
      pattern: >-
        ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
    OutputInfo:
      type: object
      properties:
        did:
          $ref: '#/components/schemas/DID'
        baseid:
          $ref: '#/components/schemas/UUID'
        rev:
          type: string
          pattern: '^[0-9a-f]{8}$'
        form:
          type: string
          description: how the entry was submitted to storage
          enum:
            - object
            - container
            - multipart
        size:
          type: integer
          format: int64
          description: size in bytes
        file_name:
          type: string
        version:
          type: string
        urls:
          type: array
          items:
            type: string
        hashes:
          $ref: '#/components/schemas/HashInfo'
        updated_date_by:
          type: string
          format: date-time
          description: last updated time
        metadata:
          type: object
          description: user defined optional metadata
    SystemVersionOutputRef:
      type: object
      properties:
        commit:
          type: string
          description: the current git commit hash for this version
        version:
          type: string
          description: the current git tag version
    SystemStatsOutputRef:
      type: object
      properties:
        fileCount:
          type: integer
          description: the number of records stored in IndexD
        totalFileSize:
          type: integer
          description: the accumulated size of the object files recorded in IndexD
